@page "/createnewgame"
@using Models;
@using SharedClassLibrary;
@using Containers;
@using System.Text;
@using SharedClassLibrary.MessageStrings;
@inject NavigationManager Navigation

<PageTitle>Create New Game</PageTitle>

<h1>Welcome Don!</h1>

<p> Game Name </p>
<input placeholder="Give the game a name" @bind="gameName" />


@if (playersInGame.Count == 0)
{
    <p><em>Add At least one player befopre creating game</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Race</th>
                <th>Mastery</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var player in playersInGame)
            {
                <tr>
                    <td>@player.Name</td>
                    <td>@player.RaceString</td>
                    <td>@player.MasteryString</td>
                    <td>@player.StatusString</td>
                </tr>
            }
        </tbody>
        
    </table>
    
}
<input placeholder="Add a player name" @bind="playerName" />
<button @onclick="AddPlayer">Add PLayer</button>

<br />

<button @onclick="CreateGame" >Create Game</button>



@code{

    private string? playerName;
    private string? gameName;
    private List<Player> playersInGame = new List<Player>() {};
    private string? createGameStatus = "";
    private StringBuilder creationStatus = new StringBuilder("");

    ActiveGameContainer? activeGame;

    private void AddPlayer() 
    {
        if (playerName != null) {
            Player newPlayer = new Player(playerName);
            // Should be made possisble to choose
            newPlayer.RaceString = "Human";
            newPlayer.MasteryString = "Bard";
            newPlayer.StatusString = "Alive";
            playersInGame.Add(newPlayer);

        } else {
            WarnOfSomethingWrong("Player must have a name");
        }
    }

    private async void CreateGame()
    {
        bool allGood = true;
        Game newGame = new();

        if (!String.IsNullOrEmpty(gameName)) {
            newGame.Name = gameName;
        }
        else {
            creationStatus.Append("Game must have a name");
            allGood = false;
        }

        if (playersInGame.Count != 0)
        {
            newGame.HumanPlayers = playersInGame;
        }
        else {
            if (creationStatus.Length != 0) {
                creationStatus.Append(" and at least one player");
            } else {
                createGameStatus = "Game must have at least One player";
            }

            allGood = false;
        }

        if (allGood)
        {

            string authHeader = "dXNlcjpwYXNzd29yZA==";    // Should be set a global place
            string baseUrl = "https://dungun.azurewebsites.net";
            string hubUri = "/gamehub";
            bool clientDon = true;

            HubService Hub = new HubService(authHeader, baseUrl, hubUri, clientDon);


            await Hub.Initialise();


            Hub.ExceptionHandlerEvent += (object? sender, HubEventArgs<HubServiceException> e) => Console.WriteLine(e.Messege?.Messege); // Subscribe to Exceptionhandler
            Hub.FileEvent += (object? sender, HubEventArgs<FileUpdateMessage> e) => Console.WriteLine(e.Messege?.ToString()); // Subscribe to Exceptionhandler
            await Hub.JoinRoom("test");

            activeGame = ActiveGameContainer.GetGameInstance;
            activeGame.UpdateToNewGame(newGame);
            createGameStatus = "Greated game succesfully";
            Navigation.NavigateTo("/activegame");
        }
        else {

            WarnOfSomethingWrong(creationStatus.ToString());
        }
    }

    private void WarnOfSomethingWrong(string message) 
    {
        // MAKE SOME KIND OF ALERT
    }

}