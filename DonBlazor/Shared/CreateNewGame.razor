@using Models;
@using SharedClassLibrary;
@using Containers;
@using System.Text;
@using SharedClassLibrary.MessageStrings;
@inject NavigationManager Navigation
@inject ActiveContainer ActiveContainer;
@inject StateContainer StateContainer;
@inject IJSRuntime JsRuntime;


<input placeholder="Give the game a name" @bind="gameName" />

<button @onclick="CreateGame" >Create Game</button>

@code{
    private string? gameName;
    private StringBuilder creationStatus = new StringBuilder("");

    private async void CreateGame()
    {
        if (!String.IsNullOrEmpty(gameName)) {
            ActiveContainer.GameMaster.Game.Name = gameName;
            var hubStatus = await ActiveContainer.SetupHub(gameName);
            if (hubStatus)
            {
                await ActiveContainer.Hub.Send(new FileUpdateMessage(gameName));
                StateContainer.GameStatus = GameStatus.PreStart;
                Navigation.NavigateTo("/activegame");
            }
            else
            {
                AlertJS("Failed to connect to hub");
            }
        }
        else {
            AlertJS("Game must have a name");
        }


    }

    public async void AlertJS(string alertMessage)
    {
        await JsRuntime.InvokeVoidAsync("alert", alertMessage);
    }
}